2023-02-07 07:49:20,035 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.6
NVCC: Cuda compilation tools, release 11.6, V11.6.112
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
PyTorch: 1.12.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0+cu116
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-07 07:49:20,036 - mmcls - INFO - Distributed training: False
2023-02-07 07:49:20,173 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV3', arch='small'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='StackedLinearClsHead',
        num_classes=10,
        in_channels=576,
        mid_channels=[1280],
        act_cfg=dict(type='HSwish'),
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
load_from = '/data/run01/scz0atc/mmclass/mmclassification/configs/resnet18/mobilenet_v3_small-8427ecf0.pth'
dataset_type = 'CIFAR10'
img_norm_cfg = dict(
    mean=[125.307, 122.961, 113.8575],
    std=[51.5865, 50.847, 51.255],
    to_rgb=False)
train_pipeline = [
    dict(type='RandomCrop', size=32, padding=4),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=2,
    train=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(type='RandomCrop', size=32, padding=4),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True),
    test=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True))
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[120, 170])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=10)
log_config = dict(interval=500, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work/cifar10'
gpu_ids = [0]

2023-02-07 07:49:20,175 - mmcls - INFO - Set random seed to 1531583058, deterministic: False
2023-02-07 07:49:20,224 - mmcls - INFO - initialize MobileNetV3 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d'], 'nonlinearity': 'leaky_relu'}, {'type': 'Normal', 'layer': ['Linear'], 'std': 0.01}, {'type': 'Constant', 'layer': ['BatchNorm2d'], 'val': 1}]
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.se.conv1.conv.weight - torch.Size([8, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.se.conv1.conv.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.se.conv2.conv.weight - torch.Size([16, 8, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.se.conv2.conv.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.conv.weight - torch.Size([72, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.expand_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.depthwise_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.conv.weight - torch.Size([88, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.expand_conv.bn.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.bn.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.conv.weight - torch.Size([88, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.depthwise_conv.bn.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.bn.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 88, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.conv.weight - torch.Size([96, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.expand_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv2.conv.weight - torch.Size([96, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv2.conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.expand_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.conv.weight - torch.Size([240, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.depthwise_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv1.conv.weight - torch.Size([64, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv1.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv2.conv.weight - torch.Size([240, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv2.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.expand_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.conv.weight - torch.Size([240, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.depthwise_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv1.conv.weight - torch.Size([64, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv1.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv2.conv.weight - torch.Size([240, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv2.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.expand_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.depthwise_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.se.conv1.conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.se.conv2.conv.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.conv.weight - torch.Size([48, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.conv.weight - torch.Size([144, 48, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.expand_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.conv.weight - torch.Size([144, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.depthwise_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.se.conv1.conv.weight - torch.Size([40, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.se.conv1.conv.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.se.conv2.conv.weight - torch.Size([144, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.se.conv2.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.conv.weight - torch.Size([48, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.conv.weight - torch.Size([288, 48, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.expand_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.conv.weight - torch.Size([288, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.depthwise_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.se.conv1.conv.weight - torch.Size([72, 288, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.se.conv1.conv.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.se.conv2.conv.weight - torch.Size([288, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.se.conv2.conv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.conv.weight - torch.Size([96, 288, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.conv.weight - torch.Size([576, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.se.conv1.conv.weight - torch.Size([144, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.se.conv1.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.se.conv2.conv.weight - torch.Size([576, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.conv.weight - torch.Size([576, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv1.conv.weight - torch.Size([144, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv1.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv2.conv.weight - torch.Size([576, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.0.fc.weight - torch.Size([1280, 576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.0.fc.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.1.fc.weight - torch.Size([10, 1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.1.fc.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
2023-02-07 07:49:22,717 - mmcls - INFO - load checkpoint from local path: /data/run01/scz0atc/mmclass/mmclassification/configs/resnet18/mobilenet_v3_small-8427ecf0.pth
2023-02-07 07:49:22,753 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.layers.0.fc.weight: copying a param with shape torch.Size([1024, 576]) from checkpoint, the shape in current model is torch.Size([1280, 576]).
size mismatch for head.layers.0.fc.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([1280]).
size mismatch for head.layers.1.fc.weight: copying a param with shape torch.Size([1000, 1024]) from checkpoint, the shape in current model is torch.Size([10, 1280]).
size mismatch for head.layers.1.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([10]).
2023-02-07 07:49:22,753 - mmcls - INFO - Start running, host: scz0atc@g0014, work_dir: /data/run01/scz0atc/mmclass/mmclassification/work/cifar10
2023-02-07 07:49:22,754 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 07:49:22,754 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-07 07:49:22,754 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0atc/mmclass/mmclassification/work/cifar10 by HardDiskBackend.
2023-02-07 07:49:39,417 - mmcls - INFO - Epoch [1][500/3125]	lr: 1.000e-01, eta: 0:51:46, time: 0.033, data_time: 0.005, memory: 27, loss: 2.5578
2023-02-07 07:49:50,625 - mmcls - INFO - Epoch [1][1000/3125]	lr: 1.000e-01, eta: 0:43:04, time: 0.022, data_time: 0.000, memory: 27, loss: 2.3092
2023-02-07 07:50:01,834 - mmcls - INFO - Epoch [1][1500/3125]	lr: 1.000e-01, eta: 0:40:02, time: 0.022, data_time: 0.000, memory: 27, loss: 2.3075
2023-02-07 07:50:13,047 - mmcls - INFO - Epoch [1][2000/3125]	lr: 1.000e-01, eta: 0:38:26, time: 0.022, data_time: 0.000, memory: 27, loss: 2.2771
2023-02-07 07:50:24,229 - mmcls - INFO - Epoch [1][2500/3125]	lr: 1.000e-01, eta: 0:37:23, time: 0.022, data_time: 0.000, memory: 27, loss: 2.3183
2023-02-07 07:50:35,333 - mmcls - INFO - Epoch [1][3000/3125]	lr: 1.000e-01, eta: 0:36:35, time: 0.022, data_time: 0.000, memory: 27, loss: 2.3179
2023-02-07 07:50:42,539 - mmcls - INFO - Epoch(val) [1][625]	accuracy_top-1: 10.0200, accuracy_top-5: 49.6800
2023-02-07 07:50:55,829 - mmcls - INFO - Epoch [2][500/3125]	lr: 1.000e-01, eta: 0:35:34, time: 0.027, data_time: 0.004, memory: 27, loss: 2.3186
2023-02-07 07:51:07,099 - mmcls - INFO - Epoch [2][1000/3125]	lr: 1.000e-01, eta: 0:35:10, time: 0.023, data_time: 0.000, memory: 27, loss: 2.3173
2023-02-07 07:51:18,363 - mmcls - INFO - Epoch [2][1500/3125]	lr: 1.000e-01, eta: 0:34:48, time: 0.023, data_time: 0.000, memory: 27, loss: 2.3164
2023-02-07 07:51:29,691 - mmcls - INFO - Epoch [2][2000/3125]	lr: 1.000e-01, eta: 0:34:30, time: 0.023, data_time: 0.000, memory: 27, loss: 2.3239
2023-02-07 07:51:41,022 - mmcls - INFO - Epoch [2][2500/3125]	lr: 1.000e-01, eta: 0:34:12, time: 0.023, data_time: 0.000, memory: 27, loss: 2.2825
2023-02-07 07:51:52,414 - mmcls - INFO - Epoch [2][3000/3125]	lr: 1.000e-01, eta: 0:33:57, time: 0.023, data_time: 0.000, memory: 27, loss: 2.2291
2023-02-07 07:51:59,825 - mmcls - INFO - Epoch(val) [2][625]	accuracy_top-1: 15.2600, accuracy_top-5: 72.1300
2023-02-07 07:52:13,103 - mmcls - INFO - Epoch [3][500/3125]	lr: 1.000e-01, eta: 0:33:26, time: 0.027, data_time: 0.004, memory: 27, loss: 2.1756
2023-02-07 07:52:24,436 - mmcls - INFO - Epoch [3][1000/3125]	lr: 1.000e-01, eta: 0:33:12, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1445
2023-02-07 07:52:35,739 - mmcls - INFO - Epoch [3][1500/3125]	lr: 1.000e-01, eta: 0:32:58, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1375
2023-02-07 07:52:47,091 - mmcls - INFO - Epoch [3][2000/3125]	lr: 1.000e-01, eta: 0:32:45, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1306
2023-02-07 07:52:58,466 - mmcls - INFO - Epoch [3][2500/3125]	lr: 1.000e-01, eta: 0:32:33, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1167
2023-02-07 07:53:09,825 - mmcls - INFO - Epoch [3][3000/3125]	lr: 1.000e-01, eta: 0:32:20, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1440
2023-02-07 07:53:17,302 - mmcls - INFO - Epoch(val) [3][625]	accuracy_top-1: 17.1400, accuracy_top-5: 76.9900
2023-02-07 07:53:30,738 - mmcls - INFO - Epoch [4][500/3125]	lr: 1.000e-01, eta: 0:31:58, time: 0.027, data_time: 0.004, memory: 27, loss: 2.0888
2023-02-07 07:53:42,026 - mmcls - INFO - Epoch [4][1000/3125]	lr: 1.000e-01, eta: 0:31:45, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1491
2023-02-07 07:53:53,361 - mmcls - INFO - Epoch [4][1500/3125]	lr: 1.000e-01, eta: 0:31:33, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1296
2023-02-07 07:54:04,713 - mmcls - INFO - Epoch [4][2000/3125]	lr: 1.000e-01, eta: 0:31:21, time: 0.023, data_time: 0.000, memory: 27, loss: 2.1055
2023-02-07 07:54:16,099 - mmcls - INFO - Epoch [4][2500/3125]	lr: 1.000e-01, eta: 0:31:09, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0640
2023-02-07 07:54:27,476 - mmcls - INFO - Epoch [4][3000/3125]	lr: 1.000e-01, eta: 0:30:58, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0448
2023-02-07 07:54:34,992 - mmcls - INFO - Epoch(val) [4][625]	accuracy_top-1: 18.6300, accuracy_top-5: 78.8500
2023-02-07 07:54:48,392 - mmcls - INFO - Epoch [5][500/3125]	lr: 1.000e-01, eta: 0:30:38, time: 0.027, data_time: 0.004, memory: 27, loss: 2.0390
2023-02-07 07:54:59,729 - mmcls - INFO - Epoch [5][1000/3125]	lr: 1.000e-01, eta: 0:30:26, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0384
2023-02-07 07:55:10,992 - mmcls - INFO - Epoch [5][1500/3125]	lr: 1.000e-01, eta: 0:30:14, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0274
2023-02-07 07:55:22,299 - mmcls - INFO - Epoch [5][2000/3125]	lr: 1.000e-01, eta: 0:30:02, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0230
2023-02-07 07:55:33,643 - mmcls - INFO - Epoch [5][2500/3125]	lr: 1.000e-01, eta: 0:29:51, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0287
2023-02-07 07:55:45,019 - mmcls - INFO - Epoch [5][3000/3125]	lr: 1.000e-01, eta: 0:29:40, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0111
2023-02-07 07:55:52,654 - mmcls - INFO - Epoch(val) [5][625]	accuracy_top-1: 11.9100, accuracy_top-5: 57.6300
2023-02-07 07:56:06,054 - mmcls - INFO - Epoch [6][500/3125]	lr: 1.000e-01, eta: 0:29:21, time: 0.027, data_time: 0.004, memory: 27, loss: 2.0271
2023-02-07 07:56:17,437 - mmcls - INFO - Epoch [6][1000/3125]	lr: 1.000e-01, eta: 0:29:10, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0100
2023-02-07 07:56:28,797 - mmcls - INFO - Epoch [6][1500/3125]	lr: 1.000e-01, eta: 0:28:59, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0082
2023-02-07 07:56:40,175 - mmcls - INFO - Epoch [6][2000/3125]	lr: 1.000e-01, eta: 0:28:48, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0101
2023-02-07 07:56:51,573 - mmcls - INFO - Epoch [6][2500/3125]	lr: 1.000e-01, eta: 0:28:37, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0223
2023-02-07 07:57:02,911 - mmcls - INFO - Epoch [6][3000/3125]	lr: 1.000e-01, eta: 0:28:25, time: 0.023, data_time: 0.000, memory: 27, loss: 2.0089
2023-02-07 07:57:10,289 - mmcls - INFO - Epoch(val) [6][625]	accuracy_top-1: 23.8100, accuracy_top-5: 82.0900
2023-02-07 07:57:23,514 - mmcls - INFO - Epoch [7][500/3125]	lr: 1.000e-01, eta: 0:28:07, time: 0.026, data_time: 0.004, memory: 27, loss: 1.9928
2023-02-07 07:57:34,718 - mmcls - INFO - Epoch [7][1000/3125]	lr: 1.000e-01, eta: 0:27:55, time: 0.022, data_time: 0.000, memory: 27, loss: 1.9985
2023-02-07 07:57:46,010 - mmcls - INFO - Epoch [7][1500/3125]	lr: 1.000e-01, eta: 0:27:44, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9987
2023-02-07 07:57:57,252 - mmcls - INFO - Epoch [7][2000/3125]	lr: 1.000e-01, eta: 0:27:32, time: 0.022, data_time: 0.000, memory: 27, loss: 1.9888
2023-02-07 07:58:09,037 - mmcls - INFO - Epoch [7][2500/3125]	lr: 1.000e-01, eta: 0:27:23, time: 0.024, data_time: 0.001, memory: 27, loss: 1.9853
2023-02-07 07:58:20,337 - mmcls - INFO - Epoch [7][3000/3125]	lr: 1.000e-01, eta: 0:27:11, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9883
2023-02-07 07:58:27,757 - mmcls - INFO - Epoch(val) [7][625]	accuracy_top-1: 26.8900, accuracy_top-5: 84.9700
2023-02-07 07:58:41,156 - mmcls - INFO - Epoch [8][500/3125]	lr: 1.000e-01, eta: 0:26:55, time: 0.027, data_time: 0.004, memory: 27, loss: 1.9467
2023-02-07 07:58:52,562 - mmcls - INFO - Epoch [8][1000/3125]	lr: 1.000e-01, eta: 0:26:43, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9423
2023-02-07 07:59:04,159 - mmcls - INFO - Epoch [8][1500/3125]	lr: 1.000e-01, eta: 0:26:33, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9602
2023-02-07 07:59:15,542 - mmcls - INFO - Epoch [8][2000/3125]	lr: 1.000e-01, eta: 0:26:22, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9586
2023-02-07 07:59:26,919 - mmcls - INFO - Epoch [8][2500/3125]	lr: 1.000e-01, eta: 0:26:11, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9234
2023-02-07 07:59:38,291 - mmcls - INFO - Epoch [8][3000/3125]	lr: 1.000e-01, eta: 0:26:00, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9165
2023-02-07 07:59:45,658 - mmcls - INFO - Epoch(val) [8][625]	accuracy_top-1: 26.9100, accuracy_top-5: 85.7100
2023-02-07 07:59:59,076 - mmcls - INFO - Epoch [9][500/3125]	lr: 1.000e-01, eta: 0:25:43, time: 0.027, data_time: 0.004, memory: 27, loss: 1.9088
2023-02-07 08:00:10,498 - mmcls - INFO - Epoch [9][1000/3125]	lr: 1.000e-01, eta: 0:25:32, time: 0.023, data_time: 0.000, memory: 27, loss: 1.9036
2023-02-07 08:00:21,886 - mmcls - INFO - Epoch [9][1500/3125]	lr: 1.000e-01, eta: 0:25:21, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8847
2023-02-07 08:00:33,265 - mmcls - INFO - Epoch [9][2000/3125]	lr: 1.000e-01, eta: 0:25:10, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8916
2023-02-07 08:00:44,667 - mmcls - INFO - Epoch [9][2500/3125]	lr: 1.000e-01, eta: 0:24:59, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8860
2023-02-07 08:00:56,135 - mmcls - INFO - Epoch [9][3000/3125]	lr: 1.000e-01, eta: 0:24:48, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8923
2023-02-07 08:01:03,594 - mmcls - INFO - Epoch(val) [9][625]	accuracy_top-1: 27.7800, accuracy_top-5: 86.0500
2023-02-07 08:01:16,988 - mmcls - INFO - Epoch [10][500/3125]	lr: 1.000e-01, eta: 0:24:32, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8779
2023-02-07 08:01:28,379 - mmcls - INFO - Epoch [10][1000/3125]	lr: 1.000e-01, eta: 0:24:21, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8532
2023-02-07 08:01:39,767 - mmcls - INFO - Epoch [10][1500/3125]	lr: 1.000e-01, eta: 0:24:10, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8771
2023-02-07 08:01:51,063 - mmcls - INFO - Epoch [10][2000/3125]	lr: 1.000e-01, eta: 0:23:59, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8665
2023-02-07 08:02:02,369 - mmcls - INFO - Epoch [10][2500/3125]	lr: 1.000e-01, eta: 0:23:47, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8735
2023-02-07 08:02:13,720 - mmcls - INFO - Epoch [10][3000/3125]	lr: 1.000e-01, eta: 0:23:36, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8481
2023-02-07 08:02:16,566 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 08:02:21,192 - mmcls - INFO - Epoch(val) [10][625]	accuracy_top-1: 26.1900, accuracy_top-5: 83.1100
2023-02-07 08:02:34,459 - mmcls - INFO - Epoch [11][500/3125]	lr: 1.000e-01, eta: 0:23:20, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8648
2023-02-07 08:02:45,765 - mmcls - INFO - Epoch [11][1000/3125]	lr: 1.000e-01, eta: 0:23:09, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8615
2023-02-07 08:02:57,082 - mmcls - INFO - Epoch [11][1500/3125]	lr: 1.000e-01, eta: 0:22:58, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8604
2023-02-07 08:03:08,360 - mmcls - INFO - Epoch [11][2000/3125]	lr: 1.000e-01, eta: 0:22:46, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8475
2023-02-07 08:03:19,626 - mmcls - INFO - Epoch [11][2500/3125]	lr: 1.000e-01, eta: 0:22:35, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8419
2023-02-07 08:03:30,957 - mmcls - INFO - Epoch [11][3000/3125]	lr: 1.000e-01, eta: 0:22:24, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8540
2023-02-07 08:03:38,346 - mmcls - INFO - Epoch(val) [11][625]	accuracy_top-1: 29.8200, accuracy_top-5: 87.4300
2023-02-07 08:03:51,787 - mmcls - INFO - Epoch [12][500/3125]	lr: 1.000e-01, eta: 0:22:08, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8684
2023-02-07 08:04:03,191 - mmcls - INFO - Epoch [12][1000/3125]	lr: 1.000e-01, eta: 0:21:57, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8356
2023-02-07 08:04:14,576 - mmcls - INFO - Epoch [12][1500/3125]	lr: 1.000e-01, eta: 0:21:46, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8432
2023-02-07 08:04:25,980 - mmcls - INFO - Epoch [12][2000/3125]	lr: 1.000e-01, eta: 0:21:35, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8347
2023-02-07 08:04:37,367 - mmcls - INFO - Epoch [12][2500/3125]	lr: 1.000e-01, eta: 0:21:24, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8428
2023-02-07 08:04:48,728 - mmcls - INFO - Epoch [12][3000/3125]	lr: 1.000e-01, eta: 0:21:13, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8288
2023-02-07 08:04:56,113 - mmcls - INFO - Epoch(val) [12][625]	accuracy_top-1: 30.0200, accuracy_top-5: 85.4800
2023-02-07 08:05:09,532 - mmcls - INFO - Epoch [13][500/3125]	lr: 1.000e-01, eta: 0:20:58, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8320
2023-02-07 08:05:20,950 - mmcls - INFO - Epoch [13][1000/3125]	lr: 1.000e-01, eta: 0:20:47, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8384
2023-02-07 08:05:32,358 - mmcls - INFO - Epoch [13][1500/3125]	lr: 1.000e-01, eta: 0:20:35, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8198
2023-02-07 08:05:43,739 - mmcls - INFO - Epoch [13][2000/3125]	lr: 1.000e-01, eta: 0:20:24, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8218
2023-02-07 08:05:55,208 - mmcls - INFO - Epoch [13][2500/3125]	lr: 1.000e-01, eta: 0:20:13, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8398
2023-02-07 08:06:06,635 - mmcls - INFO - Epoch [13][3000/3125]	lr: 1.000e-01, eta: 0:20:02, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8070
2023-02-07 08:06:14,115 - mmcls - INFO - Epoch(val) [13][625]	accuracy_top-1: 32.4200, accuracy_top-5: 88.8700
2023-02-07 08:06:27,527 - mmcls - INFO - Epoch [14][500/3125]	lr: 1.000e-01, eta: 0:19:47, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8573
2023-02-07 08:06:38,939 - mmcls - INFO - Epoch [14][1000/3125]	lr: 1.000e-01, eta: 0:19:36, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8342
2023-02-07 08:06:50,341 - mmcls - INFO - Epoch [14][1500/3125]	lr: 1.000e-01, eta: 0:19:25, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8508
2023-02-07 08:07:01,743 - mmcls - INFO - Epoch [14][2000/3125]	lr: 1.000e-01, eta: 0:19:14, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8325
2023-02-07 08:07:13,174 - mmcls - INFO - Epoch [14][2500/3125]	lr: 1.000e-01, eta: 0:19:03, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8337
2023-02-07 08:07:24,596 - mmcls - INFO - Epoch [14][3000/3125]	lr: 1.000e-01, eta: 0:18:51, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8206
2023-02-07 08:07:32,024 - mmcls - INFO - Epoch(val) [14][625]	accuracy_top-1: 26.7600, accuracy_top-5: 85.0600
2023-02-07 08:07:45,406 - mmcls - INFO - Epoch [15][500/3125]	lr: 1.000e-01, eta: 0:18:36, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8163
2023-02-07 08:07:56,648 - mmcls - INFO - Epoch [15][1000/3125]	lr: 1.000e-01, eta: 0:18:25, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8412
2023-02-07 08:08:07,882 - mmcls - INFO - Epoch [15][1500/3125]	lr: 1.000e-01, eta: 0:18:14, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8147
2023-02-07 08:08:19,114 - mmcls - INFO - Epoch [15][2000/3125]	lr: 1.000e-01, eta: 0:18:02, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8050
2023-02-07 08:08:30,354 - mmcls - INFO - Epoch [15][2500/3125]	lr: 1.000e-01, eta: 0:17:51, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8315
2023-02-07 08:08:41,592 - mmcls - INFO - Epoch [15][3000/3125]	lr: 1.000e-01, eta: 0:17:40, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8153
2023-02-07 08:08:48,972 - mmcls - INFO - Epoch(val) [15][625]	accuracy_top-1: 27.9500, accuracy_top-5: 85.8400
2023-02-07 08:09:02,320 - mmcls - INFO - Epoch [16][500/3125]	lr: 1.000e-01, eta: 0:17:25, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8152
2023-02-07 08:09:13,667 - mmcls - INFO - Epoch [16][1000/3125]	lr: 1.000e-01, eta: 0:17:14, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8142
2023-02-07 08:09:25,007 - mmcls - INFO - Epoch [16][1500/3125]	lr: 1.000e-01, eta: 0:17:03, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8908
2023-02-07 08:09:36,413 - mmcls - INFO - Epoch [16][2000/3125]	lr: 1.000e-01, eta: 0:16:51, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8709
2023-02-07 08:09:47,840 - mmcls - INFO - Epoch [16][2500/3125]	lr: 1.000e-01, eta: 0:16:40, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8461
2023-02-07 08:09:59,242 - mmcls - INFO - Epoch [16][3000/3125]	lr: 1.000e-01, eta: 0:16:29, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8178
2023-02-07 08:10:06,690 - mmcls - INFO - Epoch(val) [16][625]	accuracy_top-1: 30.0200, accuracy_top-5: 88.4000
2023-02-07 08:10:20,108 - mmcls - INFO - Epoch [17][500/3125]	lr: 1.000e-01, eta: 0:16:14, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8079
2023-02-07 08:10:31,476 - mmcls - INFO - Epoch [17][1000/3125]	lr: 1.000e-01, eta: 0:16:03, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8096
2023-02-07 08:10:42,818 - mmcls - INFO - Epoch [17][1500/3125]	lr: 1.000e-01, eta: 0:15:52, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8162
2023-02-07 08:10:54,132 - mmcls - INFO - Epoch [17][2000/3125]	lr: 1.000e-01, eta: 0:15:41, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8057
2023-02-07 08:11:05,509 - mmcls - INFO - Epoch [17][2500/3125]	lr: 1.000e-01, eta: 0:15:30, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7936
2023-02-07 08:11:16,862 - mmcls - INFO - Epoch [17][3000/3125]	lr: 1.000e-01, eta: 0:15:18, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7998
2023-02-07 08:11:24,228 - mmcls - INFO - Epoch(val) [17][625]	accuracy_top-1: 30.0200, accuracy_top-5: 87.1200
2023-02-07 08:11:37,600 - mmcls - INFO - Epoch [18][500/3125]	lr: 1.000e-01, eta: 0:15:04, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8048
2023-02-07 08:11:48,932 - mmcls - INFO - Epoch [18][1000/3125]	lr: 1.000e-01, eta: 0:14:53, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8151
2023-02-07 08:12:00,293 - mmcls - INFO - Epoch [18][1500/3125]	lr: 1.000e-01, eta: 0:14:41, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8096
2023-02-07 08:12:11,664 - mmcls - INFO - Epoch [18][2000/3125]	lr: 1.000e-01, eta: 0:14:30, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7952
2023-02-07 08:12:23,078 - mmcls - INFO - Epoch [18][2500/3125]	lr: 1.000e-01, eta: 0:14:19, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8344
2023-02-07 08:12:34,504 - mmcls - INFO - Epoch [18][3000/3125]	lr: 1.000e-01, eta: 0:14:08, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8406
2023-02-07 08:12:41,939 - mmcls - INFO - Epoch(val) [18][625]	accuracy_top-1: 30.3700, accuracy_top-5: 87.8600
2023-02-07 08:12:55,271 - mmcls - INFO - Epoch [19][500/3125]	lr: 1.000e-01, eta: 0:13:53, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8170
2023-02-07 08:13:06,736 - mmcls - INFO - Epoch [19][1000/3125]	lr: 1.000e-01, eta: 0:13:42, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7933
2023-02-07 08:13:18,152 - mmcls - INFO - Epoch [19][1500/3125]	lr: 1.000e-01, eta: 0:13:31, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7904
2023-02-07 08:13:29,423 - mmcls - INFO - Epoch [19][2000/3125]	lr: 1.000e-01, eta: 0:13:20, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8106
2023-02-07 08:13:40,635 - mmcls - INFO - Epoch [19][2500/3125]	lr: 1.000e-01, eta: 0:13:08, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7932
2023-02-07 08:13:51,826 - mmcls - INFO - Epoch [19][3000/3125]	lr: 1.000e-01, eta: 0:12:57, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7925
2023-02-07 08:13:59,261 - mmcls - INFO - Epoch(val) [19][625]	accuracy_top-1: 26.9600, accuracy_top-5: 85.1800
2023-02-07 08:14:12,500 - mmcls - INFO - Epoch [20][500/3125]	lr: 1.000e-01, eta: 0:12:42, time: 0.026, data_time: 0.004, memory: 27, loss: 1.7887
2023-02-07 08:14:23,739 - mmcls - INFO - Epoch [20][1000/3125]	lr: 1.000e-01, eta: 0:12:31, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8010
2023-02-07 08:14:35,042 - mmcls - INFO - Epoch [20][1500/3125]	lr: 1.000e-01, eta: 0:12:20, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7987
2023-02-07 08:14:46,353 - mmcls - INFO - Epoch [20][2000/3125]	lr: 1.000e-01, eta: 0:12:09, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7960
2023-02-07 08:14:57,606 - mmcls - INFO - Epoch [20][2500/3125]	lr: 1.000e-01, eta: 0:11:57, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7788
2023-02-07 08:15:08,865 - mmcls - INFO - Epoch [20][3000/3125]	lr: 1.000e-01, eta: 0:11:46, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7786
2023-02-07 08:15:11,684 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 08:15:16,272 - mmcls - INFO - Epoch(val) [20][625]	accuracy_top-1: 24.0700, accuracy_top-5: 77.1800
2023-02-07 08:15:29,641 - mmcls - INFO - Epoch [21][500/3125]	lr: 1.000e-01, eta: 0:11:32, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8594
2023-02-07 08:15:40,963 - mmcls - INFO - Epoch [21][1000/3125]	lr: 1.000e-01, eta: 0:11:20, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8233
2023-02-07 08:15:52,232 - mmcls - INFO - Epoch [21][1500/3125]	lr: 1.000e-01, eta: 0:11:09, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7972
2023-02-07 08:16:03,593 - mmcls - INFO - Epoch [21][2000/3125]	lr: 1.000e-01, eta: 0:10:58, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7982
2023-02-07 08:16:14,967 - mmcls - INFO - Epoch [21][2500/3125]	lr: 1.000e-01, eta: 0:10:47, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7980
2023-02-07 08:16:26,355 - mmcls - INFO - Epoch [21][3000/3125]	lr: 1.000e-01, eta: 0:10:36, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8082
2023-02-07 08:16:33,788 - mmcls - INFO - Epoch(val) [21][625]	accuracy_top-1: 25.0700, accuracy_top-5: 80.8800
2023-02-07 08:16:47,190 - mmcls - INFO - Epoch [22][500/3125]	lr: 1.000e-01, eta: 0:10:21, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8080
2023-02-07 08:16:58,555 - mmcls - INFO - Epoch [22][1000/3125]	lr: 1.000e-01, eta: 0:10:10, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7966
2023-02-07 08:17:09,936 - mmcls - INFO - Epoch [22][1500/3125]	lr: 1.000e-01, eta: 0:09:59, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8085
2023-02-07 08:17:21,293 - mmcls - INFO - Epoch [22][2000/3125]	lr: 1.000e-01, eta: 0:09:48, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7791
2023-02-07 08:17:32,629 - mmcls - INFO - Epoch [22][2500/3125]	lr: 1.000e-01, eta: 0:09:36, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7695
2023-02-07 08:17:43,862 - mmcls - INFO - Epoch [22][3000/3125]	lr: 1.000e-01, eta: 0:09:25, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8307
2023-02-07 08:17:51,155 - mmcls - INFO - Epoch(val) [22][625]	accuracy_top-1: 24.7400, accuracy_top-5: 85.5700
2023-02-07 08:18:04,483 - mmcls - INFO - Epoch [23][500/3125]	lr: 1.000e-01, eta: 0:09:11, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8154
2023-02-07 08:18:15,820 - mmcls - INFO - Epoch [23][1000/3125]	lr: 1.000e-01, eta: 0:09:00, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8061
2023-02-07 08:18:27,160 - mmcls - INFO - Epoch [23][1500/3125]	lr: 1.000e-01, eta: 0:08:48, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8049
2023-02-07 08:18:38,450 - mmcls - INFO - Epoch [23][2000/3125]	lr: 1.000e-01, eta: 0:08:37, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8317
2023-02-07 08:18:49,782 - mmcls - INFO - Epoch [23][2500/3125]	lr: 1.000e-01, eta: 0:08:26, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7977
2023-02-07 08:19:01,049 - mmcls - INFO - Epoch [23][3000/3125]	lr: 1.000e-01, eta: 0:08:15, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8076
2023-02-07 08:19:08,496 - mmcls - INFO - Epoch(val) [23][625]	accuracy_top-1: 30.5200, accuracy_top-5: 89.1900
2023-02-07 08:19:21,864 - mmcls - INFO - Epoch [24][500/3125]	lr: 1.000e-01, eta: 0:08:00, time: 0.027, data_time: 0.004, memory: 27, loss: 1.8139
2023-02-07 08:19:33,250 - mmcls - INFO - Epoch [24][1000/3125]	lr: 1.000e-01, eta: 0:07:49, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8868
2023-02-07 08:19:44,642 - mmcls - INFO - Epoch [24][1500/3125]	lr: 1.000e-01, eta: 0:07:38, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7755
2023-02-07 08:19:55,822 - mmcls - INFO - Epoch [24][2000/3125]	lr: 1.000e-01, eta: 0:07:27, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7715
2023-02-07 08:20:06,998 - mmcls - INFO - Epoch [24][2500/3125]	lr: 1.000e-01, eta: 0:07:15, time: 0.022, data_time: 0.000, memory: 27, loss: 1.8041
2023-02-07 08:20:18,307 - mmcls - INFO - Epoch [24][3000/3125]	lr: 1.000e-01, eta: 0:07:04, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7970
2023-02-07 08:20:25,740 - mmcls - INFO - Epoch(val) [24][625]	accuracy_top-1: 27.9400, accuracy_top-5: 83.7100
2023-02-07 08:20:39,105 - mmcls - INFO - Epoch [25][500/3125]	lr: 1.000e-01, eta: 0:06:50, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7969
2023-02-07 08:20:50,344 - mmcls - INFO - Epoch [25][1000/3125]	lr: 1.000e-01, eta: 0:06:39, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7916
2023-02-07 08:21:01,678 - mmcls - INFO - Epoch [25][1500/3125]	lr: 1.000e-01, eta: 0:06:27, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7782
2023-02-07 08:21:13,037 - mmcls - INFO - Epoch [25][2000/3125]	lr: 1.000e-01, eta: 0:06:16, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7781
2023-02-07 08:21:24,284 - mmcls - INFO - Epoch [25][2500/3125]	lr: 1.000e-01, eta: 0:06:05, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7886
2023-02-07 08:21:35,483 - mmcls - INFO - Epoch [25][3000/3125]	lr: 1.000e-01, eta: 0:05:54, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7999
2023-02-07 08:21:42,894 - mmcls - INFO - Epoch(val) [25][625]	accuracy_top-1: 31.1500, accuracy_top-5: 87.3700
2023-02-07 08:21:56,227 - mmcls - INFO - Epoch [26][500/3125]	lr: 1.000e-01, eta: 0:05:40, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7938
2023-02-07 08:22:07,566 - mmcls - INFO - Epoch [26][1000/3125]	lr: 1.000e-01, eta: 0:05:28, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7855
2023-02-07 08:22:18,903 - mmcls - INFO - Epoch [26][1500/3125]	lr: 1.000e-01, eta: 0:05:17, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7831
2023-02-07 08:22:30,233 - mmcls - INFO - Epoch [26][2000/3125]	lr: 1.000e-01, eta: 0:05:06, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7631
2023-02-07 08:22:41,550 - mmcls - INFO - Epoch [26][2500/3125]	lr: 1.000e-01, eta: 0:04:55, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7757
2023-02-07 08:22:52,945 - mmcls - INFO - Epoch [26][3000/3125]	lr: 1.000e-01, eta: 0:04:43, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8250
2023-02-07 08:23:00,423 - mmcls - INFO - Epoch(val) [26][625]	accuracy_top-1: 30.8600, accuracy_top-5: 87.6300
2023-02-07 08:23:13,843 - mmcls - INFO - Epoch [27][500/3125]	lr: 1.000e-01, eta: 0:04:29, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7811
2023-02-07 08:23:25,247 - mmcls - INFO - Epoch [27][1000/3125]	lr: 1.000e-01, eta: 0:04:18, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7813
2023-02-07 08:23:36,666 - mmcls - INFO - Epoch [27][1500/3125]	lr: 1.000e-01, eta: 0:04:07, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8028
2023-02-07 08:23:48,047 - mmcls - INFO - Epoch [27][2000/3125]	lr: 1.000e-01, eta: 0:03:56, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7649
2023-02-07 08:23:59,513 - mmcls - INFO - Epoch [27][2500/3125]	lr: 1.000e-01, eta: 0:03:44, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7960
2023-02-07 08:24:10,935 - mmcls - INFO - Epoch [27][3000/3125]	lr: 1.000e-01, eta: 0:03:33, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8011
2023-02-07 08:24:18,434 - mmcls - INFO - Epoch(val) [27][625]	accuracy_top-1: 32.4500, accuracy_top-5: 88.9800
2023-02-07 08:24:31,792 - mmcls - INFO - Epoch [28][500/3125]	lr: 1.000e-01, eta: 0:03:19, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7735
2023-02-07 08:24:43,148 - mmcls - INFO - Epoch [28][1000/3125]	lr: 1.000e-01, eta: 0:03:08, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8334
2023-02-07 08:24:54,550 - mmcls - INFO - Epoch [28][1500/3125]	lr: 1.000e-01, eta: 0:02:57, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7971
2023-02-07 08:25:05,988 - mmcls - INFO - Epoch [28][2000/3125]	lr: 1.000e-01, eta: 0:02:45, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7971
2023-02-07 08:25:17,412 - mmcls - INFO - Epoch [28][2500/3125]	lr: 1.000e-01, eta: 0:02:34, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7680
2023-02-07 08:25:28,803 - mmcls - INFO - Epoch [28][3000/3125]	lr: 1.000e-01, eta: 0:02:23, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7593
2023-02-07 08:25:36,254 - mmcls - INFO - Epoch(val) [28][625]	accuracy_top-1: 32.8100, accuracy_top-5: 88.2500
2023-02-07 08:25:49,672 - mmcls - INFO - Epoch [29][500/3125]	lr: 1.000e-01, eta: 0:02:09, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7830
2023-02-07 08:26:01,080 - mmcls - INFO - Epoch [29][1000/3125]	lr: 1.000e-01, eta: 0:01:58, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8195
2023-02-07 08:26:12,384 - mmcls - INFO - Epoch [29][1500/3125]	lr: 1.000e-01, eta: 0:01:46, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7884
2023-02-07 08:26:23,659 - mmcls - INFO - Epoch [29][2000/3125]	lr: 1.000e-01, eta: 0:01:35, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7802
2023-02-07 08:26:34,856 - mmcls - INFO - Epoch [29][2500/3125]	lr: 1.000e-01, eta: 0:01:24, time: 0.022, data_time: 0.000, memory: 27, loss: 1.7896
2023-02-07 08:26:46,167 - mmcls - INFO - Epoch [29][3000/3125]	lr: 1.000e-01, eta: 0:01:13, time: 0.023, data_time: 0.000, memory: 27, loss: 1.8293
2023-02-07 08:26:53,556 - mmcls - INFO - Epoch(val) [29][625]	accuracy_top-1: 31.2800, accuracy_top-5: 85.9400
2023-02-07 08:27:06,969 - mmcls - INFO - Epoch [30][500/3125]	lr: 1.000e-01, eta: 0:00:59, time: 0.027, data_time: 0.004, memory: 27, loss: 1.7884
2023-02-07 08:27:18,388 - mmcls - INFO - Epoch [30][1000/3125]	lr: 1.000e-01, eta: 0:00:47, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7984
2023-02-07 08:27:29,777 - mmcls - INFO - Epoch [30][1500/3125]	lr: 1.000e-01, eta: 0:00:36, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7754
2023-02-07 08:27:41,182 - mmcls - INFO - Epoch [30][2000/3125]	lr: 1.000e-01, eta: 0:00:25, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7582
2023-02-07 08:27:52,588 - mmcls - INFO - Epoch [30][2500/3125]	lr: 1.000e-01, eta: 0:00:14, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7667
2023-02-07 08:28:03,861 - mmcls - INFO - Epoch [30][3000/3125]	lr: 1.000e-01, eta: 0:00:02, time: 0.023, data_time: 0.000, memory: 27, loss: 1.7618
2023-02-07 08:28:06,715 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 08:28:11,351 - mmcls - INFO - Epoch(val) [30][625]	accuracy_top-1: 30.9200, accuracy_top-5: 85.6400
