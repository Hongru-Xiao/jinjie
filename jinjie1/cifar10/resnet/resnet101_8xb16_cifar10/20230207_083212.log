2023-02-07 08:32:12,787 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.6
NVCC: Cuda compilation tools, release 11.6, V11.6.112
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
PyTorch: 1.12.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0+cu116
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-07 08:32:12,788 - mmcls - INFO - Distributed training: False
2023-02-07 08:32:12,923 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet_CIFAR',
        depth=101,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
load_from = '/data/run01/scz0atc/mmclass/mmclassification/configs/resnet18/resnet101_b16x8_cifar10_20210528-2d29e936.pth'
dataset_type = 'CIFAR10'
img_norm_cfg = dict(
    mean=[125.307, 122.961, 113.8575],
    std=[51.5865, 50.847, 51.255],
    to_rgb=False)
train_pipeline = [
    dict(type='RandomCrop', size=32, padding=4),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=2,
    train=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(type='RandomCrop', size=32, padding=4),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True),
    test=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True))
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=10)
log_config = dict(interval=1000, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work/resnet/resnet101_8xb16_cifar10'
gpu_ids = [0]

2023-02-07 08:32:12,925 - mmcls - INFO - Set random seed to 812676580, deterministic: False
2023-02-07 08:32:13,207 - mmcls - INFO - initialize ResNet_CIFAR with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-07 08:32:13,475 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-07 08:32:16,009 - mmcls - INFO - load checkpoint from local path: /data/run01/scz0atc/mmclass/mmclassification/configs/resnet18/resnet101_b16x8_cifar10_20210528-2d29e936.pth
2023-02-07 08:32:16,310 - mmcls - INFO - Start running, host: scz0atc@g0014, work_dir: /data/run01/scz0atc/mmclass/mmclassification/work/resnet/resnet101_8xb16_cifar10
2023-02-07 08:32:16,311 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 08:32:16,311 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-07 08:32:16,311 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0atc/mmclass/mmclassification/work/resnet/resnet101_8xb16_cifar10 by HardDiskBackend.
2023-02-07 08:33:13,844 - mmcls - INFO - Epoch [1][1000/3125]	lr: 1.000e-01, eta: 1:28:55, time: 0.058, data_time: 0.002, memory: 1110, loss: 1.7470
2023-02-07 08:34:06,270 - mmcls - INFO - Epoch [1][2000/3125]	lr: 1.000e-01, eta: 1:24:03, time: 0.052, data_time: 0.000, memory: 1110, loss: 1.4579
2023-02-07 08:34:58,684 - mmcls - INFO - Epoch [1][3000/3125]	lr: 1.000e-01, eta: 1:21:51, time: 0.052, data_time: 0.000, memory: 1110, loss: 1.3010
2023-02-07 08:35:15,190 - mmcls - INFO - Epoch(val) [1][625]	accuracy_top-1: 59.0900, accuracy_top-5: 95.6400
2023-02-07 08:36:09,627 - mmcls - INFO - Epoch [2][1000/3125]	lr: 1.000e-01, eta: 1:18:30, time: 0.054, data_time: 0.002, memory: 1110, loss: 1.1848
2023-02-07 08:37:01,506 - mmcls - INFO - Epoch [2][2000/3125]	lr: 1.000e-01, eta: 1:17:25, time: 0.052, data_time: 0.000, memory: 1110, loss: 1.1312
2023-02-07 08:37:53,812 - mmcls - INFO - Epoch [2][3000/3125]	lr: 1.000e-01, eta: 1:16:31, time: 0.052, data_time: 0.000, memory: 1110, loss: 1.0682
2023-02-07 08:38:09,965 - mmcls - INFO - Epoch(val) [2][625]	accuracy_top-1: 64.9400, accuracy_top-5: 97.2300
2023-02-07 08:39:04,242 - mmcls - INFO - Epoch [3][1000/3125]	lr: 1.000e-01, eta: 1:14:37, time: 0.054, data_time: 0.002, memory: 1110, loss: 1.0038
2023-02-07 08:39:56,171 - mmcls - INFO - Epoch [3][2000/3125]	lr: 1.000e-01, eta: 1:13:47, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.9933
2023-02-07 08:40:48,046 - mmcls - INFO - Epoch [3][3000/3125]	lr: 1.000e-01, eta: 1:12:56, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.9483
2023-02-07 08:41:04,273 - mmcls - INFO - Epoch(val) [3][625]	accuracy_top-1: 66.7600, accuracy_top-5: 97.5600
2023-02-07 08:41:58,406 - mmcls - INFO - Epoch [4][1000/3125]	lr: 1.000e-01, eta: 1:11:24, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.9062
2023-02-07 08:42:50,678 - mmcls - INFO - Epoch [4][2000/3125]	lr: 1.000e-01, eta: 1:10:39, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.8904
2023-02-07 08:43:43,293 - mmcls - INFO - Epoch [4][3000/3125]	lr: 1.000e-01, eta: 1:09:55, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.8601
2023-02-07 08:43:59,438 - mmcls - INFO - Epoch(val) [4][625]	accuracy_top-1: 67.7300, accuracy_top-5: 97.3900
2023-02-07 08:44:53,798 - mmcls - INFO - Epoch [5][1000/3125]	lr: 1.000e-01, eta: 1:08:35, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.8139
2023-02-07 08:45:46,256 - mmcls - INFO - Epoch [5][2000/3125]	lr: 1.000e-01, eta: 1:07:51, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.8013
2023-02-07 08:46:38,553 - mmcls - INFO - Epoch [5][3000/3125]	lr: 1.000e-01, eta: 1:07:04, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.7836
2023-02-07 08:46:54,670 - mmcls - INFO - Epoch(val) [5][625]	accuracy_top-1: 73.4900, accuracy_top-5: 98.4000
2023-02-07 08:47:48,933 - mmcls - INFO - Epoch [6][1000/3125]	lr: 1.000e-01, eta: 1:05:49, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.7568
2023-02-07 08:48:41,384 - mmcls - INFO - Epoch [6][2000/3125]	lr: 1.000e-01, eta: 1:05:03, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.7530
2023-02-07 08:49:33,972 - mmcls - INFO - Epoch [6][3000/3125]	lr: 1.000e-01, eta: 1:04:17, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.7419
2023-02-07 08:49:50,299 - mmcls - INFO - Epoch(val) [6][625]	accuracy_top-1: 74.2000, accuracy_top-5: 98.2000
2023-02-07 08:50:44,975 - mmcls - INFO - Epoch [7][1000/3125]	lr: 1.000e-01, eta: 1:03:08, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.7190
2023-02-07 08:51:37,432 - mmcls - INFO - Epoch [7][2000/3125]	lr: 1.000e-01, eta: 1:02:21, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.7248
2023-02-07 08:52:30,130 - mmcls - INFO - Epoch [7][3000/3125]	lr: 1.000e-01, eta: 1:01:35, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6983
2023-02-07 08:52:46,287 - mmcls - INFO - Epoch(val) [7][625]	accuracy_top-1: 73.2200, accuracy_top-5: 98.2600
2023-02-07 08:53:40,700 - mmcls - INFO - Epoch [8][1000/3125]	lr: 1.000e-01, eta: 1:00:27, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6775
2023-02-07 08:54:33,321 - mmcls - INFO - Epoch [8][2000/3125]	lr: 1.000e-01, eta: 0:59:40, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6934
2023-02-07 08:55:25,970 - mmcls - INFO - Epoch [8][3000/3125]	lr: 1.000e-01, eta: 0:58:52, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6900
2023-02-07 08:55:42,118 - mmcls - INFO - Epoch(val) [8][625]	accuracy_top-1: 68.0400, accuracy_top-5: 97.6800
2023-02-07 08:56:36,322 - mmcls - INFO - Epoch [9][1000/3125]	lr: 1.000e-01, eta: 0:57:46, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6703
2023-02-07 08:57:28,435 - mmcls - INFO - Epoch [9][2000/3125]	lr: 1.000e-01, eta: 0:56:57, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6772
2023-02-07 08:58:20,906 - mmcls - INFO - Epoch [9][3000/3125]	lr: 1.000e-01, eta: 0:56:09, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6668
2023-02-07 08:58:37,076 - mmcls - INFO - Epoch(val) [9][625]	accuracy_top-1: 75.6300, accuracy_top-5: 98.4600
2023-02-07 08:59:30,962 - mmcls - INFO - Epoch [10][1000/3125]	lr: 1.000e-01, eta: 0:55:03, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6510
2023-02-07 09:00:22,842 - mmcls - INFO - Epoch [10][2000/3125]	lr: 1.000e-01, eta: 0:54:13, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6646
2023-02-07 09:01:15,049 - mmcls - INFO - Epoch [10][3000/3125]	lr: 1.000e-01, eta: 0:53:24, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6562
2023-02-07 09:01:21,641 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 09:01:31,822 - mmcls - INFO - Epoch(val) [10][625]	accuracy_top-1: 77.6300, accuracy_top-5: 98.6700
2023-02-07 09:02:26,404 - mmcls - INFO - Epoch [11][1000/3125]	lr: 1.000e-01, eta: 0:52:21, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.6425
2023-02-07 09:03:19,036 - mmcls - INFO - Epoch [11][2000/3125]	lr: 1.000e-01, eta: 0:51:33, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6381
2023-02-07 09:04:11,578 - mmcls - INFO - Epoch [11][3000/3125]	lr: 1.000e-01, eta: 0:50:44, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6375
2023-02-07 09:04:27,673 - mmcls - INFO - Epoch(val) [11][625]	accuracy_top-1: 77.1200, accuracy_top-5: 98.0200
2023-02-07 09:05:22,246 - mmcls - INFO - Epoch [12][1000/3125]	lr: 1.000e-01, eta: 0:49:41, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.6426
2023-02-07 09:06:14,355 - mmcls - INFO - Epoch [12][2000/3125]	lr: 1.000e-01, eta: 0:48:52, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6326
2023-02-07 09:07:07,024 - mmcls - INFO - Epoch [12][3000/3125]	lr: 1.000e-01, eta: 0:48:03, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6402
2023-02-07 09:07:23,060 - mmcls - INFO - Epoch(val) [12][625]	accuracy_top-1: 74.3100, accuracy_top-5: 98.0700
2023-02-07 09:08:17,115 - mmcls - INFO - Epoch [13][1000/3125]	lr: 1.000e-01, eta: 0:47:01, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6342
2023-02-07 09:09:09,644 - mmcls - INFO - Epoch [13][2000/3125]	lr: 1.000e-01, eta: 0:46:12, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6188
2023-02-07 09:10:01,572 - mmcls - INFO - Epoch [13][3000/3125]	lr: 1.000e-01, eta: 0:45:22, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6416
2023-02-07 09:10:17,735 - mmcls - INFO - Epoch(val) [13][625]	accuracy_top-1: 79.4200, accuracy_top-5: 98.8500
2023-02-07 09:11:12,037 - mmcls - INFO - Epoch [14][1000/3125]	lr: 1.000e-01, eta: 0:44:20, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6123
2023-02-07 09:12:03,955 - mmcls - INFO - Epoch [14][2000/3125]	lr: 1.000e-01, eta: 0:43:30, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6194
2023-02-07 09:12:56,409 - mmcls - INFO - Epoch [14][3000/3125]	lr: 1.000e-01, eta: 0:42:41, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6197
2023-02-07 09:13:12,424 - mmcls - INFO - Epoch(val) [14][625]	accuracy_top-1: 76.3400, accuracy_top-5: 98.6500
2023-02-07 09:14:06,402 - mmcls - INFO - Epoch [15][1000/3125]	lr: 1.000e-01, eta: 0:41:39, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.6065
2023-02-07 09:14:58,465 - mmcls - INFO - Epoch [15][2000/3125]	lr: 1.000e-01, eta: 0:40:49, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6069
2023-02-07 09:15:50,392 - mmcls - INFO - Epoch [15][3000/3125]	lr: 1.000e-01, eta: 0:39:59, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.6182
2023-02-07 09:16:06,432 - mmcls - INFO - Epoch(val) [15][625]	accuracy_top-1: 79.2500, accuracy_top-5: 99.0400
2023-02-07 09:17:01,079 - mmcls - INFO - Epoch [16][1000/3125]	lr: 1.000e-01, eta: 0:38:59, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5963
2023-02-07 09:17:53,723 - mmcls - INFO - Epoch [16][2000/3125]	lr: 1.000e-01, eta: 0:38:10, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6080
2023-02-07 09:18:46,365 - mmcls - INFO - Epoch [16][3000/3125]	lr: 1.000e-01, eta: 0:37:20, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6024
2023-02-07 09:19:02,574 - mmcls - INFO - Epoch(val) [16][625]	accuracy_top-1: 77.7900, accuracy_top-5: 98.9300
2023-02-07 09:19:57,188 - mmcls - INFO - Epoch [17][1000/3125]	lr: 1.000e-01, eta: 0:36:20, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5973
2023-02-07 09:20:49,889 - mmcls - INFO - Epoch [17][2000/3125]	lr: 1.000e-01, eta: 0:35:30, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.6036
2023-02-07 09:21:42,406 - mmcls - INFO - Epoch [17][3000/3125]	lr: 1.000e-01, eta: 0:34:41, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5960
2023-02-07 09:21:58,535 - mmcls - INFO - Epoch(val) [17][625]	accuracy_top-1: 80.7400, accuracy_top-5: 98.9000
2023-02-07 09:22:53,099 - mmcls - INFO - Epoch [18][1000/3125]	lr: 1.000e-01, eta: 0:33:41, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5891
2023-02-07 09:23:45,706 - mmcls - INFO - Epoch [18][2000/3125]	lr: 1.000e-01, eta: 0:32:51, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5854
2023-02-07 09:24:38,328 - mmcls - INFO - Epoch [18][3000/3125]	lr: 1.000e-01, eta: 0:32:01, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5962
2023-02-07 09:24:54,518 - mmcls - INFO - Epoch(val) [18][625]	accuracy_top-1: 78.3200, accuracy_top-5: 98.3400
2023-02-07 09:25:49,168 - mmcls - INFO - Epoch [19][1000/3125]	lr: 1.000e-01, eta: 0:31:02, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5747
2023-02-07 09:26:41,251 - mmcls - INFO - Epoch [19][2000/3125]	lr: 1.000e-01, eta: 0:30:11, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5887
2023-02-07 09:27:33,292 - mmcls - INFO - Epoch [19][3000/3125]	lr: 1.000e-01, eta: 0:29:21, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5975
2023-02-07 09:27:49,348 - mmcls - INFO - Epoch(val) [19][625]	accuracy_top-1: 78.8800, accuracy_top-5: 98.9200
2023-02-07 09:28:43,245 - mmcls - INFO - Epoch [20][1000/3125]	lr: 1.000e-01, eta: 0:28:22, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5909
2023-02-07 09:29:35,103 - mmcls - INFO - Epoch [20][2000/3125]	lr: 1.000e-01, eta: 0:27:31, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5836
2023-02-07 09:30:27,275 - mmcls - INFO - Epoch [20][3000/3125]	lr: 1.000e-01, eta: 0:26:41, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5766
2023-02-07 09:30:33,868 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 09:30:43,892 - mmcls - INFO - Epoch(val) [20][625]	accuracy_top-1: 79.2600, accuracy_top-5: 98.9900
2023-02-07 09:31:38,472 - mmcls - INFO - Epoch [21][1000/3125]	lr: 1.000e-01, eta: 0:25:42, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5719
2023-02-07 09:32:30,674 - mmcls - INFO - Epoch [21][2000/3125]	lr: 1.000e-01, eta: 0:24:51, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5795
2023-02-07 09:33:23,215 - mmcls - INFO - Epoch [21][3000/3125]	lr: 1.000e-01, eta: 0:24:01, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5900
2023-02-07 09:33:39,338 - mmcls - INFO - Epoch(val) [21][625]	accuracy_top-1: 78.2100, accuracy_top-5: 98.2100
2023-02-07 09:34:33,736 - mmcls - INFO - Epoch [22][1000/3125]	lr: 1.000e-01, eta: 0:23:02, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5706
2023-02-07 09:35:25,809 - mmcls - INFO - Epoch [22][2000/3125]	lr: 1.000e-01, eta: 0:22:12, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5638
2023-02-07 09:36:18,447 - mmcls - INFO - Epoch [22][3000/3125]	lr: 1.000e-01, eta: 0:21:21, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5864
2023-02-07 09:36:34,608 - mmcls - INFO - Epoch(val) [22][625]	accuracy_top-1: 80.7200, accuracy_top-5: 98.8800
2023-02-07 09:37:29,126 - mmcls - INFO - Epoch [23][1000/3125]	lr: 1.000e-01, eta: 0:20:23, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5614
2023-02-07 09:38:21,671 - mmcls - INFO - Epoch [23][2000/3125]	lr: 1.000e-01, eta: 0:19:33, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5655
2023-02-07 09:39:14,218 - mmcls - INFO - Epoch [23][3000/3125]	lr: 1.000e-01, eta: 0:18:42, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5685
2023-02-07 09:39:30,236 - mmcls - INFO - Epoch(val) [23][625]	accuracy_top-1: 77.9800, accuracy_top-5: 98.4800
2023-02-07 09:40:24,642 - mmcls - INFO - Epoch [24][1000/3125]	lr: 1.000e-01, eta: 0:17:44, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5660
2023-02-07 09:41:17,079 - mmcls - INFO - Epoch [24][2000/3125]	lr: 1.000e-01, eta: 0:16:53, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5764
2023-02-07 09:42:09,818 - mmcls - INFO - Epoch [24][3000/3125]	lr: 1.000e-01, eta: 0:16:03, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5689
2023-02-07 09:42:26,031 - mmcls - INFO - Epoch(val) [24][625]	accuracy_top-1: 76.5700, accuracy_top-5: 98.7000
2023-02-07 09:43:20,467 - mmcls - INFO - Epoch [25][1000/3125]	lr: 1.000e-01, eta: 0:15:05, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5634
2023-02-07 09:44:12,430 - mmcls - INFO - Epoch [25][2000/3125]	lr: 1.000e-01, eta: 0:14:14, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5643
2023-02-07 09:45:04,360 - mmcls - INFO - Epoch [25][3000/3125]	lr: 1.000e-01, eta: 0:13:23, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5619
2023-02-07 09:45:20,374 - mmcls - INFO - Epoch(val) [25][625]	accuracy_top-1: 82.3200, accuracy_top-5: 99.2700
2023-02-07 09:46:14,569 - mmcls - INFO - Epoch [26][1000/3125]	lr: 1.000e-01, eta: 0:12:25, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5449
2023-02-07 09:47:07,047 - mmcls - INFO - Epoch [26][2000/3125]	lr: 1.000e-01, eta: 0:11:34, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5537
2023-02-07 09:47:59,612 - mmcls - INFO - Epoch [26][3000/3125]	lr: 1.000e-01, eta: 0:10:44, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5761
2023-02-07 09:48:15,730 - mmcls - INFO - Epoch(val) [26][625]	accuracy_top-1: 82.3700, accuracy_top-5: 98.9500
2023-02-07 09:49:10,562 - mmcls - INFO - Epoch [27][1000/3125]	lr: 1.000e-01, eta: 0:09:46, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5544
2023-02-07 09:50:02,681 - mmcls - INFO - Epoch [27][2000/3125]	lr: 1.000e-01, eta: 0:08:55, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5570
2023-02-07 09:50:55,008 - mmcls - INFO - Epoch [27][3000/3125]	lr: 1.000e-01, eta: 0:08:04, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5710
2023-02-07 09:51:11,178 - mmcls - INFO - Epoch(val) [27][625]	accuracy_top-1: 81.6800, accuracy_top-5: 98.9800
2023-02-07 09:52:05,253 - mmcls - INFO - Epoch [28][1000/3125]	lr: 1.000e-01, eta: 0:07:06, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5511
2023-02-07 09:52:57,754 - mmcls - INFO - Epoch [28][2000/3125]	lr: 1.000e-01, eta: 0:06:16, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5632
2023-02-07 09:53:50,027 - mmcls - INFO - Epoch [28][3000/3125]	lr: 1.000e-01, eta: 0:05:25, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5511
2023-02-07 09:54:06,162 - mmcls - INFO - Epoch(val) [28][625]	accuracy_top-1: 79.3500, accuracy_top-5: 99.0500
2023-02-07 09:55:00,779 - mmcls - INFO - Epoch [29][1000/3125]	lr: 1.000e-01, eta: 0:04:27, time: 0.055, data_time: 0.002, memory: 1110, loss: 0.5511
2023-02-07 09:55:53,238 - mmcls - INFO - Epoch [29][2000/3125]	lr: 1.000e-01, eta: 0:03:36, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5560
2023-02-07 09:56:45,402 - mmcls - INFO - Epoch [29][3000/3125]	lr: 1.000e-01, eta: 0:02:45, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5510
2023-02-07 09:57:01,545 - mmcls - INFO - Epoch(val) [29][625]	accuracy_top-1: 81.8500, accuracy_top-5: 99.0700
2023-02-07 09:57:55,953 - mmcls - INFO - Epoch [30][1000/3125]	lr: 1.000e-01, eta: 0:01:48, time: 0.054, data_time: 0.002, memory: 1110, loss: 0.5411
2023-02-07 09:58:48,534 - mmcls - INFO - Epoch [30][2000/3125]	lr: 1.000e-01, eta: 0:00:57, time: 0.053, data_time: 0.000, memory: 1110, loss: 0.5529
2023-02-07 09:59:40,691 - mmcls - INFO - Epoch [30][3000/3125]	lr: 1.000e-01, eta: 0:00:06, time: 0.052, data_time: 0.000, memory: 1110, loss: 0.5607
2023-02-07 09:59:47,196 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 09:59:57,199 - mmcls - INFO - Epoch(val) [30][625]	accuracy_top-1: 79.8900, accuracy_top-5: 99.2100
