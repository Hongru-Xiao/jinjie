{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.6\nNVCC: Cuda compilation tools, release 11.6, V11.6.112\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.12.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0+cu116\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMClassification: 0.25.0+", "seed": 1256179026, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\nload_from = '/data/run01/scz0atc/mmclass/mmclassification/configs/resnet18/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224, backend='pillow'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1), backend='pillow'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix=\n        '/data/run01/scz0atc/mmclass/mmclassification/data/fruit81_split/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix=\n        '/data/run01/scz0atc/mmclass/mmclassification/data/fruit81_split/val',\n        ann_file=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix=\n        '/data/run01/scz0atc/mmclass/mmclassification/data/fruit81_split/val',\n        ann_file=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.5, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=25)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'work/fruit81'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 1256179026\n", "CLASSES": ["\u4eba\u53c2\u679c", "\u4f5b\u624b\u74dc", "\u54c8\u5bc6\u74dc", "\u5723\u5973\u679c", "\u5c71\u6942", "\u5c71\u7af9", "\u65e0\u82b1\u679c", "\u6728\u74dc", "\u674e\u5b50", "\u674f", "\u6768\u6843", "\u6768\u6885", "\u6787\u6777", "\u67a3", "\u67da\u5b50", "\u67e0\u6aac", "\u67ff\u5b50", "\u6811\u8393", "\u6842\u5706", "\u6851\u845a", "\u68a8", "\u6930\u5b50", "\u69b4\u83b2", "\u6a31\u6843", "\u6a58\u5b50", "\u6bdb\u4e39", "\u6c34\u871c\u6843", "\u6c83\u67d1", "\u6c99\u679c", "\u6c99\u68d8", "\u6cb9\u6843", "\u725b\u6cb9\u679c", "\u7315\u7334\u6843", "\u7518\u8517", "\u751c\u74dc-\u4f0a\u4e3d\u838e\u767d", "\u751c\u74dc-\u767d", "\u751c\u74dc-\u7eff", "\u751c\u74dc-\u91d1", "\u756a\u77f3\u69b4-\u767e", "\u756a\u77f3\u69b4-\u7ea2", "\u767d\u5170\u74dc", "\u767d\u5fc3\u706b\u9f99\u679c", "\u767d\u841d\u535c", "\u767e\u9999\u679c", "\u77f3\u69b4", "\u7802\u7cd6\u6a58", "\u7c91\u7c91\u67d1", "\u7ea2\u5fc3\u706b\u9f99\u679c", "\u7ea2\u82f9\u679c", "\u7f8a\u5976\u679c", "\u7f8a\u89d2\u871c", "\u80e1\u841d\u535c", "\u8110\u6a59", "\u8170\u679c", "\u8292\u679c", "\u82a6\u67d1", "\u8349\u8393", "\u8354\u679d", "\u83b2\u96fe", "\u83e0\u841d", "\u83e0\u841d\u8393", "\u83e0\u841d\u871c", "\u8461\u8404-\u767d", "\u8461\u8404-\u7ea2", "\u84dd\u8393", "\u86c7\u76ae\u679c", "\u87e0\u6843", "\u8840\u6a59", "\u897f\u67da", "\u897f\u6885", "\u897f\u74dc", "\u897f\u7ea2\u67ff", "\u8f66\u5398\u5b50", "\u9178\u89d2", "\u91d1\u6854", "\u9752\u67e0", "\u9752\u82f9\u679c", "\u9999\u6a7c", "\u9999\u8549", "\u9ec4\u6843", "\u9ed1\u8393"]}
